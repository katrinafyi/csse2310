!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLANK_CHAR_PRINT	deck.h	8;"	d
BLANK_CHAR_SAVED	deck.h	7;"	d
BOARD_H	board.h	2;"	d
BoardState	board.h	/^typedef struct BoardState {$/;"	s
BoardState	board.h	/^} BoardState;$/;"	t	typeref:struct:BoardState
Card	deck.h	/^typedef struct Card {$/;"	s
Card	deck.h	/^} Card;$/;"	t	typeref:struct:Card
DEBUG_PRINT	util.h	15;"	d
DEBUG_PRINT	util.h	21;"	d
DEBUG_PRINTF	util.h	17;"	d
DEBUG_PRINTF	util.h	22;"	d
DECK_H	deck.h	2;"	d
Deck	deck.h	/^typedef struct Deck {$/;"	s
Deck	deck.h	/^} Deck;$/;"	t	typeref:struct:Deck
EXITCODES_H	exitCodes.h	2;"	d
EXIT_BOARD_FULL	exitCodes.h	10;"	d
EXIT_DECK_ERROR	exitCodes.h	7;"	d
EXIT_DECK_SHORT	exitCodes.h	9;"	d
EXIT_EOF	exitCodes.h	11;"	d
EXIT_INCORRECT_ARGS	exitCodes.h	5;"	d
EXIT_INCORRECT_ARG_TYPES	exitCodes.h	6;"	d
EXIT_SAVE_ERROR	exitCodes.h	8;"	d
GAME_H	game.h	2;"	d
GameState	game.h	/^typedef struct GameState {$/;"	s
GameState	game.h	/^} GameState;$/;"	t	typeref:struct:GameState
INSTANT_SEGFAULT	util.h	10;"	d
LINE_BUFFER	util.c	8;"	d	file:
LONGESTPATH_H	scoring.h	2;"	d
MAX_SIZE	board.h	10;"	d
MIN_SIZE	board.h	9;"	d
NULL_CARD	deck.h	6;"	d
NUM_HAND	game.h	13;"	d
NUM_LETTERS	scoring.h	7;"	d
NUM_PLAYERS	game.h	10;"	d
Position	scoring.h	/^typedef struct Position {$/;"	s
Position	scoring.h	/^} Position;$/;"	t	typeref:struct:Position
UTIL_H	util.h	2;"	d
board	board.h	/^    Card* board;$/;"	m	struct:BoardState
boardState	game.h	/^    BoardState* boardState;$/;"	m	struct:GameState
c	scoring.h	/^    int c;$/;"	m	struct:Position
cards	deck.h	/^    Card* cards;$/;"	m	struct:Deck
compute_longest_path	scoring.c	/^int compute_longest_path(BoardState* boardState, char target, Position pos,$/;"	f
count_cards	board.c	/^void count_cards(BoardState* boardState) {$/;"	f
currPlayer	game.h	/^    int currPlayer;$/;"	m	struct:GameState
deal_cards	game.c	/^bool deal_cards(GameState* gameState) {$/;"	f
deck	game.h	/^    Deck* deck;$/;"	m	struct:GameState
deckFile	game.h	/^    char* deckFile;$/;"	m	struct:GameState
destroy_board	board.c	/^void destroy_board(BoardState* boardState) {$/;"	f
destroy_deck	deck.c	/^void destroy_deck(Deck* deck) {$/;"	f
destroy_game	game.c	/^void destroy_game(GameState* gameState) {$/;"	f
do_load_deck	deck.c	/^bool do_load_deck(Deck* deck, FILE* file) {$/;"	f
do_load_game	game.c	/^bool do_load_game(GameState* gameState, FILE* file) {$/;"	f
draw_card	game.c	/^Card draw_card(GameState* gameState) {$/;"	f
exec_game_loop	game.c	/^int exec_game_loop(GameState* gameState, char* playerTypes) {$/;"	f
exec_main	main.c	/^int exec_main(int argc, char** argv, GameState* gameState,$/;"	f
finish_auto_turn	game.c	/^void finish_auto_turn(GameState* gameState, Card card, int row, int col) {$/;"	f
fmt_card	deck.c	/^char* fmt_card(char* str, Card card) {$/;"	f
fmt_card_c	deck.c	/^char* fmt_card_c(char* str, Card card, char blank) {$/;"	f
fprint_board	board.c	/^bool fprint_board(BoardState* boardState, FILE* file, char blank) {$/;"	f
fprint_hand	game.c	/^bool fprint_hand(GameState* gameState, FILE* file, char* sep, int player) {$/;"	f
get_board_cell	board.c	/^Card* get_board_cell(BoardState* boardState, int row, int col) {$/;"	f
get_card_at	scoring.c	/^Card get_card_at(BoardState* bs, Position pos) {$/;"	f
get_hand	game.c	/^Card* get_hand(GameState* gameState, int playerIndex) {$/;"	f
get_player_hand	game.c	/^Card* get_player_hand(GameState* gameState) {$/;"	f
has_adjacent	board.c	/^bool has_adjacent(BoardState* boardState, int row, int col) {$/;"	f
has_card_at	board.c	/^bool has_card_at(BoardState* boardState, int row, int col) {$/;"	f
height	board.h	/^    int height;$/;"	m	struct:BoardState
init_board	board.c	/^void init_board(BoardState* boardState, int width, int height) {$/;"	f
init_game_state	game.c	/^void init_game_state(GameState* gameState) {$/;"	f
is_blank	deck.c	/^bool is_blank(char* str) {$/;"	f
is_board_empty	board.c	/^bool is_board_empty(BoardState* boardState) {$/;"	f
is_board_full	board.c	/^bool is_board_full(BoardState* boardState) {$/;"	f
is_card	deck.c	/^bool is_card(char* str) {$/;"	f
is_null_card	deck.c	/^bool is_null_card(Card card) {$/;"	f
is_on_board	board.c	/^bool is_on_board(BoardState* boardState, int r, int c) {$/;"	f
is_size_valid	board.c	/^bool is_size_valid(int width, int height) {$/;"	f
load_deck_file	deck.c	/^bool load_deck_file(Deck* deck, char* deckFile) {$/;"	f
load_game_file	game.c	/^bool load_game_file(GameState* gameState, char* saveFile) {$/;"	f
longest_letter_paths	scoring.c	/^void longest_letter_paths(BoardState* boardState, int* letterLengths) {$/;"	f
main	main.c	/^int main(int argc, char** argv) {$/;"	f
mod	board.c	/^int mod(int x, int d) {$/;"	f
new_board	board.c	/^BoardState new_board(void) {$/;"	f
new_deck	deck.c	/^Deck new_deck(void) {$/;"	f
new_game	game.c	/^GameState new_game(void) {$/;"	f
noop_print	util.c	/^void noop_print(char* str) {$/;"	f
noop_printf	util.c	/^void noop_printf(char* fmt, ...) {$/;"	f
num	deck.h	/^    int num;$/;"	m	struct:Card
numCards	deck.h	/^    int numCards;$/;"	m	struct:Deck
numDrawn	game.h	/^    int numDrawn;$/;"	m	struct:GameState
numPlaced	board.h	/^    int numPlaced;$/;"	m	struct:BoardState
parse_all_hands	game.c	/^bool parse_all_hands(FILE* file, GameState* gameState) {$/;"	f
parse_card_row	game.c	/^bool parse_card_row(FILE* file, Card* cards, int numExpected,$/;"	f
parse_int	util.c	/^int parse_int(char* str) {$/;"	f
parse_top_line	game.c	/^bool parse_top_line(FILE* file, int* w, int* h, int* n, int* v) {$/;"	f
place_card	board.c	/^bool place_card(BoardState* boardState, int row, int col, Card card) {$/;"	f
play_auto_turn	game.c	/^void play_auto_turn(GameState* gameState) {$/;"	f
playerHands	game.h	/^    Card playerHands[NUM_PLAYERS * NUM_HAND];$/;"	m	struct:GameState
printBuffer	board.h	/^    char* printBuffer;$/;"	m	struct:BoardState
print_board	board.c	/^void print_board(BoardState* boardState) {$/;"	f
print_hand	game.c	/^void print_hand(GameState* gameState) {$/;"	f
print_points	game.c	/^void print_points(GameState* gameState) {$/;"	f
prompt_move	game.c	/^bool prompt_move(GameState* gameState) {$/;"	f
r	scoring.h	/^    int r;$/;"	m	struct:Position
remove_card_from_hand	game.c	/^void remove_card_from_hand(GameState* gameState, int cardNum) {$/;"	f
safe_read_line	util.c	/^bool safe_read_line(FILE* file, char** output) {$/;"	f
save_game_file	game.c	/^bool save_game_file(GameState* gameState, char* saveFile) {$/;"	f
suit	deck.h	/^    char suit;$/;"	m	struct:Card
to_card	deck.c	/^Card to_card(char* str) {$/;"	f
tokenise	util.c	/^int tokenise(char* line, int** indexes) { \/\/ TODO: specify fixed numTokens$/;"	f
width	board.h	/^    int width;$/;"	m	struct:BoardState
